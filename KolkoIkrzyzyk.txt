import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class Main extends JFrame{
    private int licznik;
    private JButton [] listOFButtons;
    private int[][] comboWin;
    private int[] xList;
    private int[] oList;

    public Main(){
        setSize(700,700);
        setVisible(true);
        setTitle("Kó³ko i krzy¿yk");
        setLayout(new GridLayout(3,3));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        listOFButtons = new JButton[9];

        //tworzenie batonów i s³uchaczy, nie rozumiem dlaczego do ButtonClicked musi byæ przekazany parametr final

        for(int i=0; i<9; i++){
            final int a = i;
            listOFButtons[i]= new JButton(String.valueOf(i+1));

            add(listOFButtons[i]);
            listOFButtons[i].addActionListener(ev -> new ButtonClicked(a));
        }
        licznik = 0;

        //tablica tablic wszytskich indeksów kombinacji wygrywaj¹cych

        comboWin = new int[][]{
                {1,2,3},
                {4,5,6},
                {7,8,9},
                {1,4,7},
                {2,5,8},
                {3,6,9},
                {1,5,9},
                {3,5,7}
        };

        //tablice zapisuj¹ce indeksy przycisków klikniêtych przez poszczególnych graczy

        xList = new int[9];
        oList = new int[9];
    }

    //klasa z metod¹, która wykonuje siê po klikniêciu na przycisk

    class ButtonClicked {

        public ButtonClicked(int a){

            if (licznik % 2 == 0) {
                listOFButtons[a].setFont(new Font("", Font.BOLD, 50));
                listOFButtons[a].setText("X");
                listOFButtons[a].setEnabled(false);
                //powiêkszam o jeden poniewa¿ tablice automatycznie wype³niaj¹ siê zerami
                xList[a] = a+1;
            } else {
                listOFButtons[a].setFont(new Font("", Font.BOLD, 50));
                listOFButtons[a].setText("O");
                listOFButtons[a].setEnabled(false);
                //powiêkszam o jeden poniewa¿ tablice automatycznie wype³niaj¹ siê zerami
                oList[a] = a+1;
            }

            // zmienna lokalna okreœlaj¹ca czy dana kombinacja zwyciêska zosta³a "skreœlona"
            int wynik=0;
            // tablica indeksów kobinacji zwyciêskiej, która zosta³a skreœlona
            int [] winningCombo;

            //teraz pêtle od których rozbola³a mnie g³owa :), ale nic prostszego nie przychodzi mi na myœl...

            for(int i=0; i<comboWin.length; i++){
                wynik = 0;
                winningCombo = new int [3];
                for(int j=0; j<comboWin[i].length; j++){
                    for(int k=0; k<xList.length; k++){
                        if(comboWin[i][j] == xList[k] ){
                            winningCombo[wynik] = comboWin[i][j]-1;
                            wynik++;
                            if(wynik==3){
                               listOFButtons[winningCombo[0]].setBackground(Color.RED);
                               listOFButtons[winningCombo[1]].setBackground(Color.RED);
                               listOFButtons[winningCombo[2]].setBackground(Color.RED);

                               for(int l=0; l<listOFButtons.length; l++){
                                   listOFButtons[l].setEnabled(false);
                               }
                            }
                        }
                    }
                }
            }

            for(int i=0; i<comboWin.length; i++){
                wynik = 0;
                winningCombo = new int [3];
                for(int j=0; j<comboWin[i].length; j++){
                    for(int k=0; k<oList.length; k++){
                        if(comboWin[i][j] == oList[k] ){
                            winningCombo[wynik] = comboWin[i][j]-1;
                            wynik++;
                            if(wynik==3){
                                listOFButtons[winningCombo[0]].setBackground(Color.RED);
                                listOFButtons[winningCombo[1]].setBackground(Color.RED);
                                listOFButtons[winningCombo[2]].setBackground(Color.RED);

                                for(int l=0; l<listOFButtons.length; l++){
                                    listOFButtons[l].setEnabled(false);
                                }
                            }
                        }
                    }
                }
            }

            licznik++;
        }
    }
    
    public static void main(String[] args){

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main();
            }
        });
    }
}
