/**
 * Created by Farmer on 2017-02-27.
 */
public class Main {
    public static void main(String[] args){
        Statki statki = new Statki();
        statki.graj();
    }
}

----------------------------------------------------------------------------------------

import java.util.Scanner;

/**
 * Created by Farmer on 2017-02-27.
 */
public class Statki {
    Robol robol = new Robol();

    public void ustawStatki(){
        robol.ustawCzteromasztowca();
        robol.ustawTrojmasztowiec();
        robol.ustawTrojmasztowiec();
        robol.ustawDwumasztowiec();
        robol.ustawDwumasztowiec();
        robol.ustawDwumasztowiec();
        robol.ustawJednomasztowiec();
        robol.ustawJednomasztowiec();
        robol.ustawJednomasztowiec();
        robol.ustawJednomasztowiec();
    }

    public void graj(){

        ustawStatki();
        System.out.println("This is Salvo BITCH!!! Created by BiBi ;) ");
        System.out.println("Wybierz pola od A1 do E10");

        String[][] oznaczenia = new String [10][10]; // uzależnienie od liczby kolumn i wierszy w następnym patchu

        char litera;
        int liczba;
        String literaS;
        String liczbaS;
        String wyrazenie;

        litera = 'A';

        for(int i=0; i<10; i++){
            liczba = 1;
            for(int j=0; j<10; j++){
                literaS = Character.toString(litera);
                liczbaS = Integer.toString(liczba);
                wyrazenie = literaS + liczbaS;
                oznaczenia[i][j]= wyrazenie;
                liczba++;
            }
            litera++;
        }

        int licznik = 0;

        boolean k = false;
        while(k != true){
            System.out.println("Strzelaj złamasie");

            int x = -1;
            int y = -1;

            Scanner scanner = new Scanner(System.in);

            String strzal = scanner.next();
            int spr = 0;

            for(int i=0; i<10; i++){
                for(int j=0; j<10; j++){
                    if(oznaczenia[i][j].equals(strzal)){
                        if(robol.statki[i][j] == 1){
                            System.out.println("Trafiony");
                            if(robol.czyIstnieje(i+1,j) == true){
                                if(robol.statki[i+1][j] == 1){
                                    spr = spr +1;
                                }
                            }
                            if(robol.czyIstnieje(i-1,j) == true){
                                if(robol.statki[i-1][j] == 1){
                                    spr = spr +1;
                                }
                            }
                            if(robol.czyIstnieje(i,j+1) == true){
                                if(robol.statki[i][j+1] == 1){
                                    spr = spr +1;
                                }
                            }
                            if(robol.czyIstnieje(i,j-1) == true){
                                if(robol.statki[i][j-1] == 1){
                                    spr = spr +1;
                                }
                            }
                            if(spr == 0){
                                System.out.println("Zatopiony");
                            }
                            robol.statki[i][j] = 0;
                            licznik++;

                        }
                        else{
                            System.out.println("Pudło");
                        }
                    }
                }
            }
            System.out.println("licznik " + licznik); // uzleżnienie od ilosci statków w następnym patchu
            if(licznik == 20){
                System.out.println("Gratulacje wygrałeś, ale i tak jesteś cienki ;) ");
                k = true;
            }
        }
    }
}



----------------------------------------------------------------------------------------


import java.util.ArrayList;
import java.util.Arrays;

/**
 * Created by Farmer on 2017-02-28.
 */
public class Robol {
    private int liczbaKolumn = 10;
    private int liczbaWierszy = 10;
    int [][] plansza = new int[liczbaKolumn][liczbaWierszy];
    int [][] statki = new int [liczbaKolumn][liczbaWierszy];
    int [][] polaZajete= new int [liczbaKolumn][liczbaWierszy];
    int [][] polaZajeteKopia = new int[polaZajete.length][];
    //int [][] polaWykluczone1= new int[polaZajete.length][];
    int [][] polaWykluczone2= new int[polaZajete.length][];
    int [][] polaZajeteKopia2 = new int[polaZajete.length][];
    int [][] polaSprDwumasztowiec;
    //int [][] statkiTymczasowe= new int [polaZajete.length][];
    int [] tablicaZwrotu;

    public boolean czyIstnieje(int x, int y){
        boolean k = false;
        try{
            int p = plansza[x][y];
            k = true;
        }catch (Exception e){}
        return k;
    }

    public void wykluczPola1(){

        for(int i=0; i<polaZajete.length; i++){
            polaWykluczone2[i] = Arrays.copyOf(polaZajete[i], polaZajete.length);
        }
        int spr = 0;
        for(int i=0; i<liczbaKolumn; i++){
            for(int j=0; j<liczbaWierszy; j++){
                spr =0;
                if(polaZajete[i][j]==0){
                    if(czyIstnieje(i+1, j)==true){
                        if(polaZajete[i+1][j] == 0){
                            spr = spr + 1;
                        }
                    }
                    if(czyIstnieje(i-1, j)==true){
                        if(polaZajete[i-1][j] == 0){
                            spr = spr + 1;
                        }
                    }
                    if(czyIstnieje(i, j+1)==true){
                        if(polaZajete[i][j+1] == 0){
                            spr = spr + 1;
                        }
                    }
                    if(czyIstnieje(i, j-1)==true){
                        if(polaZajete[i][j-1] == 0){
                            spr = spr + 1;
                        }
                    }
                }
                if(spr == 0){
                    polaWykluczone2[i][j] = 1;
                }
            }
        }
    }

    public void wykluczPola2(){ // pewnie da sie skrócić, w którymś następnym patchu zostanie skrócone

        int spr = 0;
        int spr2 = 0;
        int spr3 = 0;
        int spr4 = 0;
        int spr5 = 0;
        for(int i=0; i<liczbaKolumn; i++){
            for(int j=0; j<liczbaWierszy; j++){
                spr =0;
                spr2 =0;
                spr3 =0;
                spr4 =0;
                spr5 =0;

                if(polaZajete[i][j]==0){
                    if(czyIstnieje(i+1, j)==true){
                        if(polaZajete[i+1][j] == 0){
                            spr = spr + 1;
                            if(czyIstnieje(i+1+1,j)==true){
                                if(polaZajete[i+1+1][j]==0 ){
                                    spr2=spr2+1;
                                }
                            }
                            if(czyIstnieje(i+1,j+1)==true){
                                if(polaZajete[i+1][j+1]==0){
                                    spr2 = spr2 +1;
                                }
                            }
                            if(czyIstnieje(i+1,j-1)==true){
                                if(polaZajete[i+1][j-1]==0){
                                    spr2 = spr2 +1;
                                }
                            }
                        }
                        else{
                            spr2=1;
                        }
                    }
                    if(czyIstnieje(i-1, j)==true){
                        if(polaZajete[i-1][j] == 0){
                            spr = spr + 1;
                            if(czyIstnieje(i-1-1,j)==true){
                                if(polaZajete[i-1-1][j]==0 ){
                                    spr3 = spr3 +1;
                                }
                            }
                            if(czyIstnieje(i-1,j+1)==true){
                                if(polaZajete[i-1][j+1]==0){
                                    spr3 = spr3 +1;
                                }
                            }
                            if(czyIstnieje(i-1,j-1)==true){
                                if(polaZajete[i-1][j-1]==0){
                                    spr3 = spr3 +1;
                                }
                            }
                        }
                        else{
                            spr3 = 1;
                        }
                    }
                    if(czyIstnieje(i, j+1)==true){
                        if(polaZajete[i][j+1] == 0){
                            spr = spr + 1;
                            if(czyIstnieje(i+1,j+1)==true){
                                if(polaZajete[i+1][j+1]==0 ){
                                    spr4 = spr4 +1;
                                }
                            }
                            if(czyIstnieje(i-1,j+1)==true){
                                if(polaZajete[i-1][j+1]==0){
                                    spr4 = spr4 +1;
                                }
                            }
                            if(czyIstnieje(i,j+1+1)==true){
                                if(polaZajete[i][j+1+1]==0){
                                    spr4 = spr4 +1;
                                }
                            }
                        }
                        else{
                            spr4 = 1;
                        }
                    }
                    if(czyIstnieje(i, j-1)==true){
                        if(polaZajete[i][j-1] == 0){
                            spr = spr + 1;
                            if(czyIstnieje(i+1,j-1)==true){
                                if(polaZajete[i+1][j-1]==0 ){
                                    spr5 = spr5 +1;
                                }
                            }
                            if(czyIstnieje(i-1,j-1)==true){
                                if(polaZajete[i-1][j-1]==0){
                                    spr5 = spr5 +1;
                                }
                            }
                            if(czyIstnieje(i,j-1-1)==true){
                                if(polaZajete[i][j-1-1]==0){
                                    spr5 = spr5 +1;
                                }
                            }
                        }
                        else{
                            spr5 = 1;
                        }
                    }
                }
                if(czyIstnieje(i+1,j)) {
                    if (spr == 1 && spr2 == 0) {
                        polaWykluczone2[i][j] = 1;
                        polaWykluczone2[i + 1][j] = 1;
                    }
                }
                if(czyIstnieje(i-1,j)) {
                    if (spr == 1 && spr3 == 0) {
                        polaWykluczone2[i][j] = 1;
                        polaWykluczone2[i - 1][j] = 1;
                    }
                }
                if(czyIstnieje(i,j+1)) {
                    if (spr == 1 && spr4 == 0) {
                        polaWykluczone2[i][j] = 1;
                        polaWykluczone2[i][j + 1] = 1;
                    }
                }
                if(czyIstnieje(i,j-1)) {
                    if (spr == 1 && spr5 == 0) {
                        polaWykluczone2[i][j] = 1;
                        polaWykluczone2[i][j - 1] = 1;
                    }
                }
            }
        }
    }

    public boolean pomocnikMozliwosci(int x, int y){
        boolean k = false;
        polaSprDwumasztowiec = new int[liczbaKolumn][liczbaWierszy];
        for(int i=0; i<polaZajete.length; i++){
            polaZajeteKopia[i] = Arrays.copyOf(polaZajete[i], polaZajete.length);
        }
        if (polaZajete[x][y]==0) {
            if (czyIstnieje(x+1,y)==true && polaZajete[x+1][y]==0) {
                k = true;
                polaZajeteKopia[x + 1][y] = 1;
                polaSprDwumasztowiec[x + 1][y] = 1;
            } else if (czyIstnieje(x,y+1)==true && polaZajete[x][y+1]==0) {
                k = true;
                polaZajeteKopia[x][y + 1] = 1;
                polaSprDwumasztowiec[x][y + 1] = 1;
            } else if (czyIstnieje(x-1,y)==true && polaZajete[x-1][y]==0) {
                k = true;
                polaZajeteKopia[x - 1][y] = 1;
                polaSprDwumasztowiec[x - 1][y] = 1;
            } else if (czyIstnieje(x,y-1)==true && polaZajete[x][y-1]==0) {
                k = true;
                polaZajeteKopia[x][y - 1] = 1;
                polaSprDwumasztowiec[x][y - 1] = 1;
            }
        }
        polaZajeteKopia[x][y] = 1;
        polaSprDwumasztowiec[x][y]=1;
        return k;
    }

    public boolean czyMozeIstniec2(){
        boolean k = false;
        for(int i=0; i<plansza.length; i++){
            for(int j=0; j<plansza.length; j++){
                if(pomocnikMozliwosci(i,j)==true){
                    k = true;
                }
            }
        }
        return k;
    }

    public void dodajPolaZajete(){
        for(int i=0; i<plansza.length; i++){
            for(int j=0; j<plansza[i].length; j++){
                if (statki[i][j] == 1){
                    for(int p=i-1; p<i+2; p++){
                        for(int r=j-1; r<j+2; r++){
                            if(czyIstnieje(p,r)==true) {
                                if ( polaZajete[p][r] !=1 ) {
                                    polaZajete[p][r] = 1;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void ustawJednomasztowiec(){

        boolean k = false;

        while(k != true) {
            int losowaX = (int) (Math.random() * liczbaKolumn);
            int losowaY = (int) (Math.random() * liczbaWierszy);

            if(polaZajete[losowaX][losowaY] == 0){
                statki[losowaX][losowaY] = 1;
                dodajPolaZajete();
                k = true;
            }
        }
    }

    public void ustawDwumasztowiec(){
        int[] wynik = new int[2];
        wykluczPola1();

        for(int i=0; i<polaZajete.length; i++){
            polaZajeteKopia2[i] = Arrays.copyOf(polaWykluczone2[i], polaWykluczone2.length);
        }
        boolean k = false;
        while(k != true) {
            int losowaX = (int) (Math.random() * liczbaKolumn);
            int losowaY = (int) (Math.random() * liczbaWierszy);
            int losowaO = (int) (Math.random() * 4);

            wynik = ustawKolejne(losowaX,losowaY,losowaO);

           if((wynik[0] >= 0) && (wynik[1] >= 0)){
               statki[losowaX][losowaY] = 1;
               statki[wynik[0]][wynik[1]] = 1;
               k = true;
           }
        }
        dodajPolaZajete();
    }

    public void ustawTrojmasztowiec(){

        wykluczPola1();
        wykluczPola2();

        int x31 = -11;
        int y31 = -11;
        int x32 = -11;
        int y32 = -11;
        int x33 = -11;
        int y33 = -11;
        int[] wynik = new int[2];

        boolean k = false;
        while(k != true) {
            for(int i=0; i<polaWykluczone2.length; i++){
                polaZajeteKopia2[i] = Arrays.copyOf(polaWykluczone2[i], polaWykluczone2.length);
            }
            int losowaX = (int) (Math.random() * liczbaKolumn);
            int losowaY = (int) (Math.random() * liczbaWierszy);
            int losowaO1 = (int) (Math.random() * 4);
            int losowaO2 = (int) (Math.random() * 4);

            wynik = ustawKolejne(losowaX, losowaY, losowaO1);
            x31 = losowaX;
            y31 = losowaY;

            x32 = wynik[0];
            y32 = wynik[1];

            if ((x32 >= 0) && (y32 >= 0)) {
                polaZajeteKopia2[losowaX][losowaY] = 1;
                polaZajeteKopia2[x32][y32] = 1;

                wynik = ustawKolejne(x32, y32, losowaO2);

                x33 = wynik[0];
                y33 = wynik[1];

                if ((x33 >= 0) && (y33 >= 0)) {
                    k = true;
                }
            }
        }
        statki[x31][y31] = 1;
        statki[x32][y32] = 1;
        statki[x33][y33] = 1;
        dodajPolaZajete();
    }

    public void ustawCzteromasztowca(){

        int x41 = -11;
        int y41 = -11;
        int x42 = -11;
        int y42 = -11;
        int x43 = -11;
        int y43 = -11;
        int x44 = -11;
        int y44 = -11;
        int[] wynik = new int[2];

        boolean k = false;
        while(k != true) {
            for(int i=0; i<polaZajete.length; i++){
                polaWykluczone2[i] = Arrays.copyOf(polaZajete[i], polaZajete.length);
            }
            for(int i=0; i<polaWykluczone2.length; i++){
                polaZajeteKopia2[i] = Arrays.copyOf(polaWykluczone2[i], polaWykluczone2.length);
            }

            int losowaX = (int) (Math.random() * liczbaKolumn);
            int losowaY = (int) (Math.random() * liczbaWierszy);
            int losowaO1 = (int) (Math.random() * 4);
            int losowaO2 = (int) (Math.random() * 4);
            int losowaO3 = (int) (Math.random() * 4);

            wynik = ustawKolejne(losowaX, losowaY, losowaO1);
            x41 = losowaX;
            y41 = losowaY;

            x42 = wynik[0];
            y42 = wynik[1];

            if ((x42 >= 0) && (y42 >= 0)) {
                polaZajeteKopia2[losowaX][losowaY] = 1;
                polaZajeteKopia2[x42][y42] = 1;

                wynik = ustawKolejne(x42, y42, losowaO2);

                x43 = wynik[0];
                y43 = wynik[1];

                if ((x43 >= 0) && (y43 >= 0)) {
                    polaZajeteKopia2[x43][y43] = 1;

                    wynik = ustawKolejne(x43, y43, losowaO3);

                    x44 = wynik[0];
                    y44 = wynik[1];
                    if ((x44 >= 0) && (y44 >= 0)) {
                        k = true;
                    }
                }
            }
        }
        statki[x41][y41] = 1;
        statki[x42][y42] = 1;
        statki[x43][y43] = 1;
        statki[x44][y44] = 1;
        dodajPolaZajete();
    }

    public int[] ustawKolejne(int x, int y, int orient){
        tablicaZwrotu = new int[2];
        tablicaZwrotu[0] = -10;
        tablicaZwrotu[1] = -10;
        if(polaWykluczone2[x][y]==0) {

            if ((orient == 0)) {
                if (czyIstnieje(x + 1, y) == true) {
                    if (polaZajeteKopia2[x + 1][y] == 0) {
                        tablicaZwrotu[0] = x + 1;
                        tablicaZwrotu[1] = y;
                    }
                }
            }
            if ((orient == 1)) {
                if (czyIstnieje(x - 1, y) == true) {
                    if (polaZajeteKopia2[x - 1][y] == 0) {
                        tablicaZwrotu[0] = x - 1;
                        tablicaZwrotu[1] = y;
                    }
                }
            }
            if ((orient == 2)) {
                if (czyIstnieje(x, y + 1) == true) {
                    if (polaZajeteKopia2[x][y + 1] == 0) {
                        tablicaZwrotu[0] = x;
                        tablicaZwrotu[1] = y + 1;
                    }
                }
            }
            if ((orient == 3)) {
                if (czyIstnieje(x, y - 1) == true) {
                    if (polaZajeteKopia2[x][y - 1] == 0) {
                        tablicaZwrotu[0] = x;
                        tablicaZwrotu[1] = y - 1;
                    }
                }
            }
        }
        return tablicaZwrotu;
    }
}


----------------------------------------------------------------------------------------




